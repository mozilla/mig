// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Contributor: Zack Mullaly zmullaly@mozilla.com [:zack]

package results

import (
	"encoding/json"
	"fmt"
	"net/http"

	"mig.ninja/mig/client/mig-client-daemon/actions"
	"mig.ninja/mig/client/mig-client-daemon/ident"
	"mig.ninja/mig/client/mig-client-daemon/migapi/authentication"
	"mig.ninja/mig/client/mig-client-daemon/migapi/search"
	"mig.ninja/mig/modules"
)

type searchResultsRequest struct {
	ActionID ident.Identifier
}

type searchResultsResponse struct {
	Error   *string          `json:"error"`
	Results []modules.Result `json:"results"`
}

// SearchResultsHandler is an HTTP handler that serves requests to retrieve results
// generated by agents that were targeted to run a particular action.
type SearchResultsHandler struct {
	actionsCatalog *actions.Catalog
	results        search.ResultAggregator
	authenticator  authentication.Authenticator
}

// NewSearchResultsHandler constructs a new `SearchResultsHandler`.
func NewSearchResultsHandler(
	catalog *actions.Catalog,
	results search.ResultAggregator,
	auth authentication.Authenticator,
) SearchResultsHandler {
	return SearchResultsHandler{
		actionsCatalog: catalog,
		results:        results,
		authenticator:  auth,
	}
}

func (handler SearchResultsHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {
	res.Header().Set("Content-Type", "application/json")
	response := json.NewEncoder(res)

	actionIDs := req.URL.Query()["action"]
	if len(actionIDs) == 0 {
		res.WriteHeader(http.StatusBadRequest)
		errMsg := "missing action parameter"
		response.Encode(&searchResultsResponse{
			Error:   &errMsg,
			Results: []modules.Result{},
		})
		return
	}

	request := searchResultsRequest{
		ActionID: ident.Identifier(actionIDs[0]),
	}

	record, found := handler.actionsCatalog.Lookup(request.ActionID)
	if !found {
		res.WriteHeader(http.StatusBadRequest)
		errMsg := fmt.Sprintf("no such action %s", request.ActionID)
		response.Encode(&searchResultsResponse{
			Error:   &errMsg,
			Results: []modules.Result{},
		})
		return
	}

	results, err := handler.results.Search(record.InternalID, handler.authenticator)
	if err != nil {
		res.WriteHeader(http.StatusInternalServerError)
		errMsg := fmt.Sprintf("failde to retrieve results from the MIG API. Error: %s", err.Error())
		response.Encode(&searchResultsResponse{
			Error:   &errMsg,
			Results: []modules.Result{},
		})
		return
	}

	response.Encode(&searchResultsResponse{
		Error:   nil,
		Results: results,
	})
}
